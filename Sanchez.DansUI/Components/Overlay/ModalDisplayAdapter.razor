@inject IModalService ModalService
@implements IDisposable
@using System.Reactive.Linq

@if (currentModal != null)
{
    <div class="container">
        <div class="background" @onclick=@currentDismiss></div>
        @currentModal
    </div>
}

@code {
    private IDisposable modalSubscription;
    private RenderFragment currentModal;
    private Action currentDismiss;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        modalSubscription = ModalService.DisplayStack()
            .SelectMany(async x =>
            {
                if (x == null)
                {
                    currentModal = null;
                    currentDismiss = null;
                } 
                else
                {
                    currentModal = null;
                    currentDismiss = null;
                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(10);

                    currentDismiss = x.OnClosed;
                    currentModal = (builder) =>
                    {
                        builder.OpenComponent(0, x.Type);
                        builder.AddAttribute(1, nameof(IModal<object>.OnCompleted), x.OnCompleted);
                        builder.AddAttribute(2, nameof(IModal<object>.OnExit), x.OnClosed);
                        builder.AddAttribute(3, nameof(IModal<object>.Parameters), x.Parameters);
                        builder.CloseComponent();
                    };
                }
                await InvokeAsync(StateHasChanged);

                return System.Reactive.Unit.Default;
            })
            .Subscribe();
    }

    public void Dispose()
    {
        if (modalSubscription != null)
            modalSubscription.Dispose();
    }
}