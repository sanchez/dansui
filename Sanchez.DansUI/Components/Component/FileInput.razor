@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.JSInterop
@using Sanchez.DansUI.Extensions
@using System.Reflection

@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="container" @ref=dropZone>
    <label>
        @if (Label != null)
        {
            <span>@Label</span>
        }

        <span class="fieldContainer">
            @if (Prefix != null)
            {
                <span>@Prefix</span>
            }

            <div class="info">
                @if (selectedFiles.Count == 0)
                {
                    <text>No Files Selected</text>
                }
                else
                {
                    @string.Join(", ", selectedFiles)
                }
            </div>

            @if (Suffix != null)
            {
                <span>@Suffix</span>
            }
        </span>
        <InputFile @ref=inputFile OnChange=@HandleChange @attributes=@AdditionalAttributes />
    </label>
</div>

@code {
    private ElementReference dropZone;
    private InputFile inputFile;
    private IJSObjectReference dropZoneJS;

    private ICollection<string> selectedFiles = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var inputFileElement = inputFile.GetType().GetField("_inputFileElement", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
            var inputFileElementValue = (ElementReference)inputFileElement.GetValue(inputFile);
            dropZoneJS = await JSRuntime.BindFileInput(dropZone, inputFileElementValue);
        }
    }

    private Task HandleChange(InputFileChangeEventArgs ev)
    {
        selectedFiles.Clear();
        if (ev.FileCount == 0)
        {
        }
        else if (ev.FileCount == 1)
        {
            selectedFiles.Add(ev.File.Name);
        }
        else
        {
            foreach (var file in ev.GetMultipleFiles(ev.FileCount))
                selectedFiles.Add(file.Name);
        }
        return OnChange.InvokeAsync(ev);
    }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public RenderFragment Prefix { get; set; }

    [Parameter]
    public RenderFragment Suffix { get; set; } = 
    @<Icon Type="Icons.IconType.FILE_INPUT" />
    ;

    [Parameter]
    public EventCallback<InputFileChangeEventArgs> OnChange { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    public async ValueTask DisposeAsync()
    {
        if (dropZoneJS != null)
        {
            await dropZoneJS.InvokeVoidAsync("dispose");
            await dropZoneJS.DisposeAsync();
        }
    }
}