@using Sanchez.DansUI.Icons
@using Sanchez.DansUI.Controllers
@using Sanchez.DansUI.Components.Component
@using System.Reactive.Linq

@implements IDisposable

<div class="container">
    <div>
        <Icon Type="IconType.CHEVRON_LEFT" @onclick=HandlePrev />
    </div>
    <div class="indexer">
        @foreach (var (i, isActive) in CalculateDisplayPages(2))
        {
            if (isActive)
            {
                <div class="index active">@i</div>
            }
            else
            {
                <div class="index" @onclick="() => SetPage(i)">@i</div>
            }
        }
    </div>
    <div>
        <Icon Type="IconType.CHEVRON_RIGHT" @onclick=HandleNext />
    </div>
</div>

@code {
    IDisposable lastSubscribe;

    [Parameter]
    public IPageController PageController { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (lastSubscribe != null) lastSubscribe.Dispose();

        lastSubscribe = Observable.Merge(
        PageController.ListenCurrentPage(),
        PageController.ListenMaxPage()
        )
        .Throttle(TimeSpan.FromMilliseconds(10))
        .Do(x =>
        {
            InvokeAsync(StateHasChanged);
        })
        .Subscribe();
    }

    protected ICollection<(int, bool)> CalculateDisplayPages(int stepSize)
    {
        return Enumerable
        .Range(PageController.CurrentPage - stepSize, stepSize * 2 + 1)
        .Where(x => x > 0 && (PageController.MaxPage == -1 || x <= PageController.MaxPage))
        .Select(x => (x, x == PageController.CurrentPage))
        .ToList();
    }

    protected void SetPage(int newPage)
    {
        PageController.SetPage(newPage);
    }

    protected void HandlePrev()
    {
        PageController.SetPage(PageController.CurrentPage - 1);
    }

    protected void HandleNext()
    {
        PageController.SetPage(PageController.CurrentPage + 1);
    }

    public void Dispose()
    {
        if (lastSubscribe != null) lastSubscribe.Dispose();
    }
}