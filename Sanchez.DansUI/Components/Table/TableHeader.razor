@using BlazorComponentUtilities
@using System.Reactive.Subjects

@implements IDisposable

<th class=@headerClass @onclick=HandleClick>
    <div class="inner">
        @if (FilterContent != null)
        {
            <CascadingValue Name="ClickHandler" Value=@filterHeaderActions>
                <div class="filter">@FilterContent</div>
            </CascadingValue>
        }
        <div class="content">@ChildContent</div>
        @if (SortContent != null && ShowSortContent)
        {
            <CascadingValue Name="ClickHandler" Value=@sortHeaderActions>
                <div class="sorter">@SortContent</div>
            </CascadingValue>
        }
    </div>
</th>

@code {
    private string headerClass;
    private Subject<object> sortHeaderActions;
    private Subject<object> filterHeaderActions;

    protected override void OnInitialized()
    {
        sortHeaderActions = new();
        filterHeaderActions = new();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        headerClass = new CssBuilder()
        .AddClass("show-borders", when: TableConfig.ShowBorders)
        .AddClass("is-interactive", when: SortContent != null)
        .Build();
    }

    protected void HandleClick()
    {
        if (SortContent != null)
        {
            sortHeaderActions.OnNext(this);
        }
    }

    [CascadingParameter(Name = nameof(TableConfig))]
    public TableConfig TableConfig { get; set; }

    [Parameter]
    public RenderFragment FilterContent { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment SortContent { get; set; }

    [Parameter]
    public bool ShowSortContent { get; set; } = true;

    public void Dispose()
    {
        if (sortHeaderActions != null) sortHeaderActions.Dispose();
        if (filterHeaderActions != null) filterHeaderActions.Dispose();
    }
}