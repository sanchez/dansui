@using BlazorComponentUtilities
@using Sanchez.DansUI.Controllers
@using System.Reactive.Linq

@typeparam TItem

<CascadingValue Name="@nameof(TableConfig)" Value=tableConfig>
    <div class="@tableContainer">
        <table class="@tableClass">
            <thead>
                <tr>@Header</tr>
            </thead>
            <tbody>
                @foreach (var item in ProcessedItems)
                {
                    <tr>@RowTemplate(item)</tr>
                }
            </tbody>
        </table>
    </div>
</CascadingValue>

@code {
    IDisposable tablePageListener;

    string tableClass;
    TableConfig tableConfig = new TableConfig();
    string tableContainer => ShouldOverflow ? "container should-overflow" : "container";

    IEnumerable<TItem> ProcessedItems
    {
        get
        {
            IEnumerable<TItem> items = Items;
            if (PageController != null)
                items = PageController.PageContent(items.ToList());

            return items;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        tableConfig.ShowBorders = ShowBorders;
        tableConfig.AltRowColors = AlternateRowColors;

        tableClass = new CssBuilder()
        .AddClass("show-borders", when: tableConfig.ShowBorders)
        .AddClass("alt-rows", when: tableConfig.AltRowColors)
        .Build();

        if (tablePageListener != null) tablePageListener.Dispose();
        if (PageController != null)
        {
            tablePageListener =
            Observable.Merge(
            PageController.ListenMaxPage(),
            PageController.ListenCurrentPage()
            )
            .Do(x =>
            {
                InvokeAsync(StateHasChanged);
            })
            .Subscribe();
        }
    }

    [Parameter]
    public bool ShouldOverflow { get; set; } = true;

    [Parameter]
    public bool ShowBorders { get; set; } = true;

    [Parameter]
    public bool AlternateRowColors { get; set; } = true;

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }

    [Parameter]
    public ICollection<TItem> Items { get; set; }

    [Parameter]
    public IPageController<TItem> PageController { get; set; }
}