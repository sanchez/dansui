@using BlazorComponentUtilities
@typeparam TItem

<CascadingValue Name="@nameof(TableConfig)" Value=tableConfig>
    <div class="@tableContainer">
        <table class="@tableClass">
            <thead>
                <tr>@Header</tr>
            </thead>
            <tbody>
                @foreach (var item in Items)
                {
                    <tr>@RowTemplate(item)</tr>
                }
            </tbody>
        </table>
    </div>
</CascadingValue>

@code {
    string tableClass;
    TableConfig tableConfig = new TableConfig();
    string tableContainer => ShouldOverflow ? "container should-overflow" : "container";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        tableConfig.ShowBorders = ShowBorders;
        tableConfig.AltRowColors = AlternateRowColors;

        tableClass = new CssBuilder()
        .AddClass("show-borders", when: tableConfig.ShowBorders)
        .AddClass("alt-rows", when: tableConfig.AltRowColors)
        .Build();
    }

    [Parameter]
    public bool ShouldOverflow { get; set; } = true;

    [Parameter]
    public bool ShowBorders { get; set; } = true;

    [Parameter]
    public bool AlternateRowColors { get; set; } = true;

    [Parameter]
    public RenderFragment Header { get; set; }

    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }

    [Parameter]
    public ICollection<TItem> Items { get; set; }
}