@using DynamicData.Binding
@using Sanchez.DansUI.Icons
@using Sanchez.DansUI.Controllers
@using System.Reactive.Linq
@using System.Linq.Expressions
@using System.Reflection

@implements IDisposable

@typeparam TItem

<Sanchez.DansUI.Components.Component.Icon Type="@SortIcon" @onclick=HandleClick />

@code {
    private string componentId = Guid.NewGuid().ToString();
    private IDisposable _clickListener;
    private IDisposable _sortListener;

    protected override void OnParametersSet()
    {
        if (_clickListener != null) _clickListener.Dispose();
        if (_sortListener != null) _sortListener.Dispose();

        _sortListener = SortController.ListenCurrentAlgorithm()
        .Do(x => StateHasChanged())
        .Subscribe();

        if (ClickHandler != null)
            _clickListener = ClickHandler
            .Do(x => HandleClick())
            .Subscribe();
    }

    protected IconType SortIcon
    {
        get
        {
            var lastValue = SortController.CurrentAlgorithm;
            if (lastValue?.Name != Name) return IconType.CHEVRONS_UP_DOWN;
            if (lastValue.IsDescending) return IconType.CHEVRON_UP;
            return IconType.CHEVRON_DOWN;
        }
    }

    protected Func<TItem, IComparable> GenerateSelector()
    {
        var propInfo = typeof(TItem).GetProperty(Name);
        return (item) => propInfo.GetValue(item) as IComparable;
    }

    protected void HandleClick()
    {
        var lastValue = SortController.CurrentAlgorithm;
        if (lastValue?.Name == Name)
        {
            SortController.SetAlgorithm(new SortAlgorithm<TItem>(Name, !lastValue.IsDescending, GenerateSelector()));
        }
        else
        {
            SortController.SetAlgorithm(new SortAlgorithm<TItem>(Name, false, GenerateSelector()));
        }
    }

    [Parameter]
    public ISortController<TItem> SortController { get; set; }

    [Parameter]
    public string Name { get; set; }

    [CascadingParameter(Name = "ClickHandler")]
    public IObservable<object> ClickHandler { get; set; }

    public void Dispose()
    {
        if (_clickListener != null) _clickListener.Dispose();
        if (_sortListener != null) _sortListener.Dispose();
    }
}