@inherits LayoutComponentBase

@using Sanchez.DansUI.Components.App
@using Sanchez.DansUI.Components.Navbar
@using Sanchez.DansUI.Components.Sidebar
@using Sanchez.DansUI.Runner.Blazor.Models

@inject NavigationManager NavManager

@implements IDisposable

@inject ICommanderService CommandService

<ModalDisplayAdapter />
<ToastDisplayAdapter />
<PopperDisplayAdapter />
<CommanderAdapter />
<AppContainer>
    <Navbar>
        <Burger>
            <Icon Type="Icons.IconType.MENU" @onclick=HandleToggleSidebar />
        </Burger>
        <Title>
            <StyledLink Href="/">
                DansUI Demo Board
            </StyledLink>
        </Title>
        <Actions>
            <div @onclick="HandleUserActions">Sanchez's Profile</div>
            <DropOver @bind-Show="@isUserActions">
                <UserAction>
                    <IconContent>
                        <Icon Type="Icons.IconType.SETTINGS" />
                    </IconContent>
                    <ChildContent>
                        User Profile
                    </ChildContent>
                </UserAction>
                <UserAction>
                    <IconContent>
                        <Icon Type="Icons.IconType.LOG_OUT" />
                    </IconContent>
                    <ChildContent>
                        Logout
                    </ChildContent>
                </UserAction>
            </DropOver>
        </Actions>
    </Navbar>

    <Sidebar IsOpen=@isSidebarOpen>
        <SidebarSection>Standards</SidebarSection>
        <StyledLink Href="/standards/color">
            <SidebarItem>Coloring</SidebarItem>
        </StyledLink>
        <StyledLink Href="/standards/layout">
            <SidebarItem>Layout</SidebarItem>
        </StyledLink>

        @foreach (var navItem in navItems)
        {
            @navItem.Nav
        }

    </Sidebar>

    <AppContent>
        @Body
    </AppContent>

</AppContainer>

@code {
    protected bool isSidebarOpen = true;
    bool isUserActions = false;

    void HandleUserActions()
    {
        isUserActions = true;
        StateHasChanged();
    }

    protected void HandleToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
        StateHasChanged();
    }

    List<NavEntry> navItems = new();

    void AddSection(IconType icon, string title)
    {
        RenderFragment rFrag =
    @<SidebarSection>
        <IconContent>
            <Icon Type=@icon />
        </IconContent>
        <ChildContent>@title</ChildContent>
    </SidebarSection>
    ;

        navItems.Add(new(rFrag, null, icon, $"Navigate to {title}"));
    }

    void AddLink(IconType icon, string location, string title)
    {
        RenderFragment rFrag =
    @<StyledLink Href=@location>
        <SidebarItem>
            <IconContent>
                <Icon Type=@icon />
            </IconContent>
            <ChildContent>@title</ChildContent>
        </SidebarItem>
    </StyledLink>
    ;

        navItems.Add(new(rFrag, location, icon, $"Navigate to {title}"));
    }

    protected void ExampleCommand()
    {
        // do something eventually
    }

    IDisposable commandDisposes;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        AddSection(IconType.MONITOR, "Display");
        AddLink(IconType.CREDIT_CARD, "/display/card", "Card");
        AddLink(IconType.LAYOUT_GRID, "/display/grid", "Grid");
        AddLink(IconType.TABLE, "/display/table", "Table");
        AddLink(IconType.TABLE, "/display/reflectiontable", "Reflection Table");
        AddLink(IconType.LIST_ORDERED, "/display/stepper", "Stepper");
        AddLink(IconType.GIT_MERGE, "/display/treeview", "TreeView");

        AddSection(IconType.COMMAND, "Components");
        AddLink(IconType.HASH, "/component/heading", "Heading");
        AddLink(IconType.MOUSE_POINTER, "/component/button", "Button");
        AddLink(IconType.TAG, "/component/tag", "Tag");
        AddLink(IconType.SEARCH, "/component/search", "SearchBar");
        AddLink(IconType.TYPE, "/component/textbar", "TextBar");
        AddLink(IconType.SHIELD_ALERT, "/component/notification", "Notification");
        AddLink(IconType.LOADER_2, "/component/loader", "Loader");
        AddLink(IconType.FILE_INPUT, "/component/fileinput", "File Input");
        AddLink(IconType.HAND, "/component/dragndrop", "Drag N Drop");

        AddSection(IconType.FORM_INPUT, "Form");
        AddLink(IconType.FORM_INPUT, "/form/form", "Example Form");
        AddLink(IconType.FORM_INPUT, "/form/dropdown", "Dropdown Form");

        AddSection(IconType.BRUSH, "Drawing");
        AddLink(IconType.THERMOMETER, "/drawing/value", "Value");

        AddSection(IconType.AIRPLAY, "Overlay");
        AddLink(IconType.ACTIVITY, "/overlay/popper", "Popper");
        AddLink(IconType.SIDEBAR_CLOSE, "/overlay/modal", "Modal");
        AddLink(IconType.BELL, "/overlay/toast", "Toast");
        AddLink(IconType.DROPLET, "/overlay/dropover", "DropOver");
        AddLink(IconType.DROPLETS, "/overlay/dropdown", "DropDown");

        var totalCommands = new List<Command>();

        var linkCommands =
        navItems
        .Where(x => x.Url != null)
        .Select(x => new Command(x.Icon, x.Title, () => NavManager.NavigateTo(x.Url)));
        totalCommands.AddRange(linkCommands);

        commandDisposes = CommandService.RegisterCommand(new Command()
        {
            Icon = IconType.NAVIGATION,
            Name = "Go to",
            Description = "Quick navigation to a page",
            SubCommands = totalCommands
        });
    }

    public void Dispose()
    {
        if (commandDisposes != null) commandDisposes.Dispose();
    }
}